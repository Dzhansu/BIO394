# Blood vessel diffusionimport numpy as npimport mathimport matplotlib.pyplot as pltdef distribute(molecule, mean, diffusion, fraction):    """    Create a normal distribution between 0 and 1    """    while True: #fraction of molecules that go left right etc value between 0 and 1 normally distributed, particle to find at position x as normal distribution        number = np.random.normal(loc=mean, scale=diffusion)        if 0 < number < 1:            break    return math.floor(number * molecule * fraction)if __name__ == "__main__":    Matrix_size = 20    Vessel_section = np.empty([Matrix_size, Matrix_size])    Vessel_section = Vessel_section.astype(int)    Number_molecules = 100000    Min = 0.7    Max = 1.    for i in range(len(Vessel_section)):        for j in range(len(Vessel_section[i])):            Vessel_section[i][j] = math.floor(Number_molecules * np.random.uniform(Min, Max))    Initial_concentration = sum(sum(Vessel_section))    print('initial conc', Initial_concentration)    Remaining_fraction = 0.2 # 5% remaining    Remaining_molecules = sum(sum(Vessel_section)) * Remaining_fraction    # Initialize plotting arrays    lys = []    lys_a = []    # Initialize values    Vessel_length = 0    Absorption = 0    Molecule_transferred = 0    while True:        # Plot the actual number of molecules in the vessel        Vessel_length += 1        lys_a.append(sum(sum(Vessel_section)))        lys.append(Vessel_length)        # Display the remaining concentration        if Vessel_length % 10 == 0:            value = (1 - (Initial_concentration - sum(sum(Vessel_section))) / Initial_concentration)*100            precision = 2            print('Remaining concentration: ', '{:.{}f}'.format(value, precision), '%')        # Iterate over each cell and transfer the fraction of molecules in the function distribute        # If the cell is peripheral then this amount will be absorbed        for i in range(len(Vessel_section)):            for c in range(len(Vessel_section[i])):                # Transfer only if there are molecules                if Vessel_section[i][c] > 0:                    Molecule_transferred = distribute(molecule=Vessel_section[i][c], mean=0, diffusion=1, fraction=0.001)                else:                    continue                a = np.random.randint(1, 5)                if i == 0:                    if c == 0:                        if a == 1 or a == 2:                            Absorption = Absorption + Molecule_transferred                        elif a == 3:                            Vessel_section[i][c + 1] = Vessel_section[i][c + 1] + Molecule_transferred                        elif a == 4:                            Vessel_section[i + 1][c] = Vessel_section[i + 1][c] + Molecule_transferred                    elif 0 < c < len(Vessel_section[i]) - 1:                        if a == 1:                            Vessel_section[i][c - 1] = Vessel_section[i][c - 1] + Molecule_transferred                        elif a == 2:                            Absorption = Absorption + Molecule_transferred                        elif a == 3:                            Vessel_section[i][c + 1] = Vessel_section[i][c + 1] + Molecule_transferred                        elif a == 4:                            Vessel_section[i + 1][c] = Vessel_section[i + 1][c] + Molecule_transferred                    elif c == len(Vessel_section[i]) - 1:                        if a == 1:                            Vessel_section[i][c - 1] = Vessel_section[i][c - 1] + Molecule_transferred                        elif a == 2 or a == 3:                            Absorption = Absorption + Molecule_transferred                        elif a == 4:                            Vessel_section[i + 1][c] = Vessel_section[i + 1][c] + Molecule_transferred                if 0 < i < len(Vessel_section) - 1:                    if c == 0:                        if a == 1:                            Absorption = Absorption + Molecule_transferred                        elif a == 2:                            Vessel_section[i - 1][c] = Vessel_section[i - 1][c] + Molecule_transferred                        elif a == 3:                            Vessel_section[i][c + 1] = Vessel_section[i][c + 1] + Molecule_transferred                        elif a == 4:                            Vessel_section[i + 1][c] = Vessel_section[i + 1][c] + Molecule_transferred                    elif 0 < c < len(Vessel_section[i]) - 1:                        if a == 1:                            Vessel_section[i][c - 1] = Vessel_section[i][c - 1] + Molecule_transferred                        elif a == 2:                            Vessel_section[i - 1][c] = Vessel_section[i - 1][c] + Molecule_transferred                        elif a == 3:                            Vessel_section[i][c + 1] = Vessel_section[i][c + 1] + Molecule_transferred                        elif a == 4:                            Vessel_section[i + 1][c] = Vessel_section[i + 1][c] + Molecule_transferred                    elif c == len(Vessel_section[i]) - 1:                        if a == 1:                            Vessel_section[i][c - 1] = Vessel_section[i][c - 1] + Molecule_transferred                        elif a == 2:                            Vessel_section[i - 1][c] = Vessel_section[i - 1][c] + Molecule_transferred                        elif a == 3:                            Absorption = Absorption + Molecule_transferred                        elif a == 4:                            Vessel_section[i + 1][c] = Vessel_section[i + 1][c] + Molecule_transferred                if i == len(Vessel_section) - 1:                    if c == 0:                        if a == 1 or a == 4:                            Absorption = Absorption + Molecule_transferred                        elif a == 2:                            Vessel_section[i - 1][c] = Vessel_section[i - 1][c] + Molecule_transferred                        elif a == 3:                            Vessel_section[i][c + 1] = Vessel_section[i][c + 1] + Molecule_transferred                    elif 0 < c < len(Vessel_section[i]) - 1:                        if a == 1:                            Vessel_section[i][c - 1] = Vessel_section[i][c - 1] + Molecule_transferred                        elif a == 2:                            Vessel_section[i - 1][c] = Vessel_section[i - 1][c] + Molecule_transferred                        elif a == 3:                            Vessel_section[i][c + 1] = Vessel_section[i][c + 1] + Molecule_transferred                        elif a == 4:                            Absorption = Absorption + Molecule_transferred                    elif c == len(Vessel_section[i]) - 1:                        if a == 1:                            Vessel_section[i][c - 1] = Vessel_section[i][c - 1] + Molecule_transferred                        elif a == 2:                            Vessel_section[i - 1][c] = Vessel_section[i - 1][c] + Molecule_transferred                        elif a == 3 or a == 4:                            Absorption = Absorption + Molecule_transferred                if Vessel_section[i][c] - Molecule_transferred > 0:                    Vessel_section[i][c] = Vessel_section[i][c] - Molecule_transferred                else:                    # Set any negative value to zero                    Vessel_section[i][c] = 0        print(Vessel_length)        print(sum(sum(Vessel_section)))        if sum(sum(Vessel_section)) <= Initial_concentration - 50000: #Simulate till 50000 molecules pass the blood brain barrier            break   